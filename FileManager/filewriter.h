#ifndef FILEWRITER_H
#define FILEWRITER_H

#include "filemanager.h"

template<typename T>
class FileWriter : public QObject, public Writer<T> {
protected:
    QFile* file;
    QDataStream* inFile;
public:
    bool write(T& t) override;
    bool flush() override;
    bool clear_buffer() override;

    FileWriter(QFile* file);
};

template <typename T>
bool FileWriter<T>::write(T& t)
{
    *inFile << t;
    if (inFile->status()== QDataStream::WriteFailed)
        return false;
    return true;
	
}

template <typename T>
bool FileWriter<T>::flush()
{
    this->file->write(this->data);
    this->data.clear();
    this->file->flush();
    return true;
}

template <typename T>
bool FileWriter<T>::clear_buffer()
{
    this->data.clear();
    return true;
}

template <typename T>
FileWriter<T>::FileWriter(QFile* file) : QObject(file) {
    this->file = file;
    if (!file->isOpen())
        file->open(QFile::Append);
    inFile = new QDataStream(&this->data, QIODevice::Append);
}

#endif // FILEWRITER_H
