#include "editrecorddialog.h"

#include <qcryptographichash.h>


#include "ui_editrecorddialog.h"
#include "QMessageBox"
#include "choosesigdialog.h"

bool EditRecordDialog::checkFields() {
    return !ui->virusName->text().isEmpty() && sigSet;
}

EditRecordDialog::EditRecordDialog(QWidget* parent) : QDialog(parent), ui(new Ui::EditRecordDialog) {
    ui->setupUi(this);
    setWindowTitle("Добавить запись");
    setWindowFlags(Qt::WindowSystemMenuHint | Qt::WindowTitleHint);
    record = nullptr;
    sigSet = false;
    connect(ui->okButton, SIGNAL(clicked()), this, SLOT(checkAccept()));
    connect(ui->cancelButton, SIGNAL(clicked()), this, SLOT(reject()));
    connect(ui->chooseSign, SIGNAL(clicked()), this, SLOT(chooseSig()));
    connect(ui->prefixLength, SIGNAL(valueChanged(int)), this, SLOT(changedPrefixLen(int)));
}


EditRecordDialog::EditRecordDialog(Record* record, QWidget* parent) : EditRecordDialog(parent) {
    this->record = record;
    sigSet = true;
    if (record != nullptr) {
        setWindowTitle("Изменить запись");
        ui->virusName->setText(record->virusName);
        ui->signLength->setValue(record->signatureLength);
        ui->prefix->setText(record->prefix.toHex(' '));
        ui->hash->setText(record->signatureHash.toHex(' '));
        ui->begOffset->setValue(record->offsetBegin);
        ui->endOffset->setValue(record->offsetEnd);
    }
}

EditRecordDialog::~EditRecordDialog() {
    delete ui;
}

Record* EditRecordDialog::getRecord() {
    return record;
}

void EditRecordDialog::checkAccept() {
    if (record == nullptr)
    record = new Record(this);
    record->virusName = ui->virusName->text();
    record->signatureLength =ui->signLength->value();
    record->prefix = selectedData.left(ui->prefixLength->value());
    record->signatureHash = QCryptographicHash::hash(selectedData, QCryptographicHash::Sha1);
    record->offsetBegin = ui->begOffset->value();
    record->offsetEnd = ui->endOffset->value();
    accept();
}

void EditRecordDialog::chooseSig() {
    QFileDialog fileDialog;
    fileDialog.setWindowTitle("Выберите файл");
    fileDialog.setOption(QFileDialog::DontConfirmOverwrite, true);
    fileDialog.setFilter(QDir::Readable | QDir::Executable);
    if (fileDialog.exec()) {
        QFile* sigFile = new QFile(fileDialog.selectedFiles().at(0));
        if (sigFile->exists()) {
            ChooseSigDialog chooseSigDialog(sigFile);
            if (chooseSigDialog.exec()) {
                selectedData = chooseSigDialog.getSelectedData();
                if (selectedData.size() > 5) {
                    int prefSize = ui->prefixLength->value();
                    ui->prefix->setText(selectedData.left(prefSize).toHex(' '));
                    ui->signLength->setValue(selectedData.size());
                    ui->hash->setText(QCryptographicHash::hash(selectedData, QCryptographicHash::Sha1).toHex(' '));
                    sigSet = true;
                }
                else {
                    QMessageBox::warning(this, "Слишком короткая сигнатура", "Минимальный размер - 5 байт", "Ок");
                }
            }
        }
        else
            QMessageBox::warning(this, "Ошибка", "Файл не существует или его невозможно прочитать!", "Ок");
        sigFile->deleteLater();
    }
}


void EditRecordDialog::changedPrefixLen(int value) {
    ui->prefix->setText(selectedData.left(value).toHex(' '));
}


