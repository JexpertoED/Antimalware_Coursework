#include "mainwindow.h"
#include "ui_mainwindow.h"
#include <QFileDialog>
#include <ui_editrecorddialog.h>
#include "editrecorddialog.h"


MainWindow::MainWindow(QWidget* parent)
	: QMainWindow(parent)
	  , ui(new Ui::MainWindow)
{
	ui->setupUi(this);
	recordmodel = new RecordTableModel(ui->centralwidget);
	ui->tableView->setModel(recordmodel);
	ui->tableView->setSelectionBehavior(QAbstractItemView::SelectRows);
	ui->tableView->horizontalHeader()->setSectionResizeMode(QHeaderView::Stretch);
	connect(ui->openFile, SIGNAL(triggered()), SLOT(openFile()));
    connect(ui->createFile, SIGNAL(triggered()), SLOT(createFile()));
	connect(ui->createButton, SIGNAL(clicked()), SLOT(createRecordDialog()));
	connect(ui->changeButton, SIGNAL(clicked()), SLOT(changeRecordDialog()));
	connect(ui->deleteButton, SIGNAL(clicked()), SLOT(deleteRecordDialog()));
}

MainWindow::~MainWindow()
{
	delete ui;
}


void MainWindow::createRecordDialog() {
	EditRecordDialog dialog;
	if (dialog.exec()) {
		Record* record = dialog.getRecord();
		recordmodel->appendRecord(record);
		ui->tableView->resizeColumnsToContents();
	}
}
void MainWindow::changeRecordDialog() {
	QModelIndexList list = ui->tableView->selectionModel()->selectedRows();
	if (list.empty())
		return;
	int row = list.at(0).row();
	Record* record = recordmodel->getRecords().at(row); //vector?
	EditRecordDialog dialog(record);
	if (dialog.exec()) {
		recordmodel->updateRow(row);
	}
}


void MainWindow::deleteRecordDialog(){
	

	QModelIndexList list = ui->tableView->selectionModel()->selectedRows();
	if (list.empty())
		return;
	int row = list.at(0).row();
	recordmodel->removeRow(row);

	
	//saved = false;
	//statusSaveLabel->setText("");
}

	
void MainWindow::createFile() {
	// Если файл не сохранили, спросить, надо ли сохранить. Если да, но не сохранился, отмена операции
	recordmodel->clear();
    if (dbIsOpened)
        dbmanager.close();
    dbIsOpened = false;
    ui->changeButton->setDisabled(false);
	ui->createButton->setDisabled(false);
	ui->deleteButton->setDisabled(false);
}

void MainWindow::openFile()
{
	QFileDialog fileDialog;
	fileDialog.setWindowTitle("Открыть файл");
	fileDialog.setAcceptMode(QFileDialog::AcceptOpen);
	fileDialog.setOption(QFileDialog::DontConfirmOverwrite);
	fileDialog.setFilter(QDir::Readable | QDir::Executable);
	fileDialog.setNameFilter("SDB file (*.sdb)");
	if (fileDialog.exec())
	{
		QStringList list = fileDialog.selectedFiles();
		if (list.size() == 0)
			return;
		recordmodel->clear();
        if (dbIsOpened)
            dbmanager.close();
		ui->changeButton->setDisabled(true);
		ui->createButton->setDisabled(true);
		ui->deleteButton->setDisabled(true);
		QFile file(list.at(0), this); //TODO: Deletelater
		dbmanager.open(&file, QIODevice::ReadOnly);
        dbIsOpened = true;
		int success = dbmanager.read_init_sequence(new QString());
		if (success == -1) {
			QMessageBox::warning(this, ("Ошибка чтения файла"),
				("Читаемый файл не поддерживается или уже произошла попытка чтения уникального идентификатора базы данных, который был уже считан."
					),
				QMessageBox::Cancel);
			return;
		}

		quint64 numofrecords = dbmanager.read_num_of_records();
		if (numofrecords < 1) {
			QMessageBox::warning(this, ("Ошибка чтения файла"),
				("База данных пуста или количество записей отрицательно"
					),
				QMessageBox::Cancel);
			return;
		}
		statusProgressBar->setMaximum(numofrecords - 1);
		quint64 number;
		Record record;
		bool state;
		 do{
			state = dbmanager.readRecord(record);
			if (!state)
				break;
			recordmodel->appendRecord(&record);
			statusProgressBar->setValue(number);
			if (number % 10 == 0)
				QApplication::processEvents(QEventLoop::AllEvents, 500);
		}while (state);
		
	}
}
