#include "databasemanager.h"

DatabaseManager::DatabaseManager()
{
}

DatabaseManager::DatabaseManager(QFile* file, QIODevice::OpenMode mode, Record* buffer)
{
	this->dbfile = file;
	this->mode = mode;
	this->buffer = buffer;
	recordsNum = 0;
	if (!dbfile->isOpen())
	{
		dbfile->open(mode); //QFile::Append
	}
	else
	{
		dbfile->close();
		dbfile->open(mode);
	}
}


DatabaseManager::~DatabaseManager()
{
	this->dbfile->close();
	delete this->dbfile;
}

void DatabaseManager::addRecord(Record& rec)
{
	if (!(mode & QIODevice::Append))
	{
		this->dbfile->close();
		this->dbfile->open(QFile::Append);
		mode = QIODevice::Append;
	}
	writer->write(rec);
	writer->flush();
	recordsNum++;
}

void DatabaseManager::init()
{
	init_sequence_read = false;
	num_records_read = false;
	writer = new FileWriter<Record>(this->dbfile);
	reader = new FileReader<Record>(this->dbfile);
	if (mode & QIODevice::Append)
		return;
	FileWriter<QString>* initwriter = new FileWriter<QString>(this->dbfile);
	QString name = QString("rybakov");
	initwriter->write(name);
	initwriter->flush();
	initwriter->deleteLater();
	FileWriter<quint64>* numwriter = new FileWriter<quint64>(this->dbfile);
	numwriter->write(recordsNum);
	numwriter->flush();
	numwriter->deleteLater();

	//delete initwriter;
}

bool DatabaseManager::readRecord(Record& rec)
{
	if (!((mode == QIODevice::ReadOnly) || (mode == QIODevice::ReadWrite)))
	{
		this->dbfile->close();
		this->dbfile->open(QFile::ReadOnly);
		mode = QIODevice::ReadOnly;
	}
	if (!init_sequence_read)
	{
		QString initseq;
		FileReader<QString>* initreader = new FileReader<QString>(this->dbfile);
		initreader->read(&initseq);
		//delete initreader;
		init_sequence_read = true;
	}
	return reader->read(&rec);
}


void DatabaseManager::open(QFile* file, QFile::OpenMode mode)
{
	this->dbfile->close();
	this->dbfile = file;
	if (!dbfile->isOpen())
	{
		dbfile->open(mode); //QFile::Append
	}
}

void DatabaseManager::close()
{
  if  (this->dbfile->isOpen())
    this->dbfile->close();
  delete this->dbfile;
}

int DatabaseManager::read_init_sequence(QString* outPtr)
{
	if (init_sequence_read)
		return -1;
	FileReader<QString>* initreader = new FileReader<QString>(this->dbfile);
	initreader->read(outPtr);
	init_sequence_read = true;
	if (*outPtr != QString("rybakov"))
		return -1;
	return 0;
}

quint64 DatabaseManager::read_num_of_records()
{
	if (num_records_read)
		return -1;
	if (init_sequence_read)
		return -1;
	FileReader<quint64>* numreader = new FileReader<quint64>(this->dbfile);
	numreader->read(&recordsNum);
	return recordsNum;
}
